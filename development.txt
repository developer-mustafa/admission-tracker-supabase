
<script>
document.addEventListener('DOMContentLoaded', () => {
  // ================ INITIALIZATION ================
  const supabaseUrl = 'https://erihbeinkymnymncnawm.supabase.co'; //[cite:46]
  const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVyaWhiZWlua3ltbnltbmNuYXdtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3NzEwMzUsImV4cCI6MjA2MjM0NzAzNX0.xhE0_RbBQ9qQcYHa5sv-S9-cUolJruo0Km3oud-GtOM'; //[cite:46]
  const supabaseMain = supabase.createClient(supabaseUrl, supabaseKey);

  // App state
  let students = []; //[cite:47]
  let filteredStudents = []; //[cite:47]
  let currentPage = 1; //[cite:47]
  const studentsPerPage = 9; // Adjusted for potentially larger cards
  let currentEditingId = null; //[cite:47]
  let pendingAction = null; //[cite:47]
  let pendingActionData = null; //[cite:48]

  // Chart Instances
  let classChart, statusChart, progressChart; //[cite:48]

  // Enhanced Status Configuration for cards and PDF
  const statusConfig = {
    "Not Checked": {
      icon: '<i class="fas fa-question-circle"></i>',
      baseBg: 'bg-gray-100 dark:bg-gray-700', // General background for the card
      gradient: 'from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-800', // Card gradient
      badgeBg: 'bg-gray-400 dark:bg-gray-500', // Ribbon/Badge Background
      text: 'text-gray-800 dark:text-gray-200',
      iconColor: 'text-gray-500 dark:text-gray-400',
      pdfColor: "#95a5a6"
    },
    "Called": {
      icon: '<i class="fas fa-phone-alt"></i>', //[cite:50]
      baseBg: 'bg-purple-50 dark:bg-purple-900',
      gradient: 'from-purple-50 to-purple-100 dark:from-purple-800 dark:to-purple-900', //[cite:50]
      badgeBg: 'bg-purple-500 dark:bg-purple-600',
      text: 'text-purple-800 dark:text-purple-100', //[cite:50]
      iconColor: 'text-purple-500 dark:text-purple-300', //[cite:50]
      pdfColor: "#8e44ad" // Darker purple for PDF
    },
    "Follow-Up Needed": {
      icon: '<i class="fas fa-exclamation-circle"></i>', //[cite:50]
      baseBg: 'bg-amber-50 dark:bg-amber-900',
      gradient: 'from-amber-50 to-amber-100 dark:from-amber-800 dark:to-amber-900', //[cite:50]
      badgeBg: 'bg-amber-500 dark:bg-amber-600',
      text: 'text-amber-800 dark:text-amber-100', //[cite:51]
      iconColor: 'text-amber-500 dark:text-amber-300', //[cite:51]
      pdfColor: "#f39c12" // Darker amber
    },
    "Agreed": {
      icon: '<i class="fas fa-handshake"></i>', //[cite:51]
      baseBg: 'bg-blue-50 dark:bg-blue-900',
      gradient: 'from-blue-50 to-blue-100 dark:from-blue-800 dark:to-blue-900', //[cite:51]
      badgeBg: 'bg-blue-500 dark:bg-blue-600',
      text: 'text-blue-800 dark:text-blue-100', //[cite:51]
      iconColor: 'text-blue-500 dark:text-blue-300', //[cite:51]
      pdfColor: "#2980b9" // Darker blue
    },
    "Paid": {
      icon: '<i class="fas fa-check-circle"></i>', //[cite:52]
      baseBg: 'bg-emerald-50 dark:bg-emerald-900',
      gradient: 'from-emerald-50 to-emerald-100 dark:from-emerald-800 dark:to-emerald-900', //[cite:52]
      badgeBg: 'bg-emerald-500 dark:bg-emerald-600',
      text: 'text-emerald-800 dark:text-emerald-100', //[cite:52]
      iconColor: 'text-emerald-500 dark:text-emerald-300', //[cite:52]
      pdfColor: "#27ae60" // Darker emerald
    },
    "Not Interested": {
      icon: '<i class="fas fa-ban"></i>', //[cite:52]
      baseBg: 'bg-red-50 dark:bg-red-900',
      gradient: 'from-red-50 to-red-100 dark:from-red-800 dark:to-red-900', //[cite:53]
      badgeBg: 'bg-red-500 dark:bg-red-600',
      text: 'text-red-800 dark:text-red-100', //[cite:53]
      iconColor: 'text-red-500 dark:text-red-300', //[cite:53]
      pdfColor: "#c0392b" // Darker red
    }
  };


  // DOM Elements
  const loadingOverlay = document.getElementById('loadingOverlay'); //[cite:55]
  const studentPanelModal = document.getElementById('studentPanelModal'); //[cite:55]
  const openStudentPanel = document.getElementById('openStudentPanel'); //[cite:55]
  const closeStudentPanel = document.getElementById('closeStudentPanel'); //[cite:56]
  const modalTitle = document.getElementById('modalTitle'); //[cite:56]
  const studentForm = document.getElementById('studentForm'); //[cite:56]
  const studentList = document.getElementById('studentList'); //[cite:56]
  const initialLoadingMessage = document.getElementById('initialLoadingMessage');
  const searchInput = document.getElementById('searchInput'); //[cite:56]
  const statusFilter = document.getElementById('statusFilter'); //[cite:57]
  const classFilter = document.getElementById('classFilter'); //[cite:57]
  const groupFilter = document.getElementById('groupFilter'); //[cite:57]
  const prevPage = document.getElementById('prevPage'); //[cite:57]
  const nextPage = document.getElementById('nextPage'); //[cite:57]
  const pageInfo = document.getElementById('pageInfo'); //[cite:58]
  const showingCount = document.getElementById('showingCount'); //[cite:58]
  const totalCount = document.getElementById('totalCount'); //[cite:58]
  const saveButtonText = document.getElementById('saveButtonText');

  const confirmModal = document.getElementById('confirmModal'); //[cite:58]
  const confirmModalTitle = document.getElementById('confirmModalTitle'); //[cite:58]
  const confirmModalMessage = document.getElementById('confirmModalMessage'); //[cite:59]
  const cancelConfirm = document.getElementById('cancelConfirm'); //[cite:59]
  const proceedConfirm = document.getElementById('proceedConfirm'); //[cite:59]

  const exportCSVBtn = document.getElementById('exportCSV'); //[cite:59]
  const exportPDFBtn = document.getElementById('exportPDF'); //[cite:59]
  const backupJSONBtn = document.getElementById('backupJSON'); //[cite:60]
  const importCSVInput = document.getElementById('importCSV'); //[cite:60]
  const restoreJSONInput = document.getElementById('restoreJSON'); //[cite:60]

  const darkModeToggle = document.getElementById('darkModeToggle'); //[cite:60]
  const toggleThumb = document.getElementById('toggleThumb'); //[cite:60]
  const toggleIcon = document.getElementById('toggleIcon'); //[cite:61]
  
  const toastContainer = document.getElementById('toastContainer');

  // Dashboard Elements
  const dashboardElements = {
    total: document.getElementById('totalStudents'),
    called: document.getElementById('calledStudents'),
    followup: document.getElementById('followupStudents'),
    agreed: document.getElementById('agreedStudents'),
    none: document.getElementById('noneStudents'), // "Not Interested"
    paid: document.getElementById('paidStudents')
  }; //[cite:61]

  // ================ UTILITY FUNCTIONS ================
  const showLoading = (text = "Processing...") => {
    loadingOverlay.querySelector('span').textContent = text;
    loadingOverlay.classList.remove('hidden');
  }; //[cite:62]

  const hideLoading = () => {
    loadingOverlay.classList.add('hidden');
  }; //[cite:63]

  const showToast = (message, type = 'info', duration = 3000) => {
    const toast = document.createElement('div'); //[cite:64]
    const icons = {
        success: 'fa-check-circle',
        error: 'fa-times-circle',
        warning: 'fa-exclamation-triangle',
        info: 'fa-info-circle'
    };
    const colors = {
        success: 'bg-green-500 dark:bg-green-600',
        error: 'bg-red-500 dark:bg-red-600',
        warning: 'bg-yellow-500 dark:bg-yellow-600',
        info: 'bg-blue-500 dark:bg-blue-600'
    }; //[cite:65]
    
    toast.className = `flex items-center gap-3 p-3 rounded-lg shadow-xl text-white ${colors[type]} transition-all duration-300 transform opacity-0 translate-y-2`;
    toast.innerHTML = `
        <i class="fas ${icons[type]} text-lg"></i>
        <span class="text-sm font-medium">${message}</span>
        <button class="ml-auto text-white/70 hover:text-white focus:outline-none">&times;</button>
    `; //[cite:67]
    
    toastContainer.appendChild(toast);

    // Animate in
    setTimeout(() => {
        toast.classList.remove('opacity-0', 'translate-y-2');
        toast.classList.add('opacity-100', 'translate-y-0');
    }, 10);

    const closeButton = toast.querySelector('button');
    let timeoutId;

    const removeToast = () => {
        toast.classList.remove('opacity-100', 'translate-y-0');
        toast.classList.add('opacity-0', 'translate-y-2');
        setTimeout(() => {
            toast.remove();
            clearTimeout(timeoutId);
        }, 300);
    };

    closeButton.addEventListener('click', removeToast);
    if (duration) {
        timeoutId = setTimeout(removeToast, duration);
    }
  }; //[cite:68]


  const debounce = (func, wait) => {
    let timeout; //[cite:69]
    return function(...args) {
      clearTimeout(timeout); //[cite:70]
      timeout = setTimeout(() => func.apply(this, args), wait); //[cite:71]
    };
  };

  const formatDate = (dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    if (isNaN(date)) return 'Invalid Date';
    // More robust date formatting, handles timezone offset issues better for display
    const userTimezoneOffset = date.getTimezoneOffset() * 60000;
    const localDate = new Date(date.getTime() + userTimezoneOffset); // Adjust to UTC then format as local
    const options = { year: 'numeric', month: 'short', day: 'numeric' }; //[cite:71]
    return localDate.toLocaleDateString(undefined, options); //[cite:72]
  };
  
  const getCurrentDateInput = () => {
    return new Date().toISOString().split('T')[0];
  };

  const validatePhone = (phone) => {
    const regex = /^[0-9+()\s-]{10,18}$/; // Allows + and some formatting
    return regex.test(phone); //[cite:73]
  };

  const showConfirmation = (title, message, action, data = null, confirmButtonClass = 'bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-800') => {
    pendingAction = action; //[cite:73]
    pendingActionData = data; //[cite:74]
    confirmModalTitle.textContent = title; //[cite:74]
    confirmModalMessage.textContent = message; //[cite:74]
    proceedConfirm.className = `px-4 py-2 text-white rounded-md transition custom-focus ${confirmButtonClass}`;
    confirmModal.classList.remove('hidden'); //[cite:74]
  };

  const hexToRgb = (hex) => {
    if (!hex || typeof hex !== 'string') return [0,0,0];
    const bigint = parseInt(hex.replace('#', ''), 16); //[cite:75]
    return [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255]; //[cite:76]
  };

  const parseCSVLine = (line) => {
    const pattern = /(?:,|\n|^)("(?:(?:"")*[^"]*)*"|[^",\n]*|(?:\n|$))/g; //[cite:77]
    const values = []; //[cite:78]
    let match;
    while ((match = pattern.exec(line)) !== null) {
      let value = match[0]; //[cite:78]
      if (value.startsWith(',')) value = value.substring(1); //[cite:79]
      if (value.startsWith('"') && value.endsWith('"')) {
        value = value.substring(1, value.length - 1).replace(/""/g, '"'); //[cite:79]
      }
      values.push(value.trim());
    }
    return values;
  };

  // ================ DATA FUNCTIONS ================
  const fetchStudents = async () => {
    if (!initialLoadingMessage.classList.contains('hidden')) {
        initialLoadingMessage.classList.remove('hidden');
    } else if (studentList.innerHTML === '') { // only show loading if list is empty
        studentList.innerHTML = `
            <div class="col-span-full text-center py-10">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                <p class="text-gray-500 dark:text-gray-400">Loading students...</p>
            </div>`;
    }
    showLoading("Fetching students...");
    try {
      const { data, error } = await supabaseMain
        .from('studentsdemo')
        .select('*')
        .order('created_at', { ascending: false }); // Order by creation time for consistency

      if (error) throw error;

      students = data || []; //[cite:81]
      applyFiltersAndRender();
      // updateDashboard(); // Called by applyFiltersAndRender
      // updateCharts(); // Called by applyFiltersAndRender
      localStorage.setItem('admissionTrackerData', JSON.stringify(students)); // Cache data
    } catch (error) {
      console.error('Error fetching students:', error);
      showToast('Failed to load students. Trying local cache.', 'error');
      const localData = localStorage.getItem('admissionTrackerData');
      if (localData) { //[cite:82]
        students = JSON.parse(localData); //[cite:82]
        applyFiltersAndRender();
        // updateDashboard();
        // updateCharts();
      } else {
        studentList.innerHTML = `<div class="col-span-full text-center py-10"><i class="fas fa-exclamation-triangle text-3xl text-red-500 mb-3"></i><p class="text-red-500 dark:text-red-400">Could not fetch students and no local data found.</p></div>`;
      }
    } finally {
      hideLoading();
      if (!initialLoadingMessage.classList.contains('hidden')) {
          initialLoadingMessage.classList.add('hidden');
      }
    }
  }; //[cite:84]

  const saveStudent = async (studentData, id = null) => {
    showLoading(id ? "Updating student..." : "Adding student...");
    try {
      if (!studentData.name || !studentData.phone || !studentData.class || !studentData.date) {
        throw new Error('Please fill all required fields (*).'); //[cite:85]
      }
      if (!validatePhone(studentData.phone)) {
        throw new Error('Please enter a valid phone number (10-18 digits, can include +, -, ()).'); //[cite:86]
      }

      let result;
      let operationType = '';
      if (id) { //[cite:88]
        const { data, error } = await supabaseMain
          .from('studentsdemo')
          .update(studentData)
          .eq('id', id)
          .select();
        if (error) throw error; //[cite:89]
        result = data[0]; //[cite:89]
        operationType = 'updated';
      } else { //[cite:90]
        // Add created_at timestamp for new students
        const { data, error } = await supabaseMain
          .from('studentsdemo')
          .insert([{ ...studentData, created_at: new Date().toISOString() }])
          .select();
        if (error) throw error; //[cite:91]
        result = data[0]; //[cite:91]
        operationType = 'added';
      }
      
      showToast(`Student ${operationType} successfully!`, 'success');

      // No need to manually update local 'students' array if Supabase real-time is active
      // It will trigger a re-fetch. If not using real-time or for immediate UI update:
      if (id) {
        const index = students.findIndex(s => s.id === id); //[cite:92]
        if (index !== -1) students[index] = result; //[cite:93]
      } else {
        students.unshift(result); //[cite:93]
      }
      applyFiltersAndRender(); // This will update UI, dashboard, charts
      // updateDashboard();
      // updateCharts();
      return true; //[cite:94]
    } catch (error) {
      console.error('Error saving student:', error); //[cite:95]
      showToast(error.message || 'Failed to save student', 'error'); //[cite:96]
      return false;
    } finally {
      hideLoading(); //[cite:97]
    }
  };

  const deleteStudent = async (id) => {
    showLoading("Deleting student...");
    try {
      const { error } = await supabaseMain
        .from('studentsdemo')
        .delete()
        .eq('id', id); //[cite:98]
      if (error) throw error; //[cite:99]

      // No need to manually update local 'students' array if Supabase real-time is active
      // students = students.filter(student => student.id !== id);
      // applyFiltersAndRender();
      // updateDashboard();
      // updateCharts();
      showToast('Student deleted successfully!', 'success'); //[cite:100]
      return true;
    } catch (error) {
      console.error('Error deleting student:', error); //[cite:100]
      showToast('Failed to delete student', 'error'); //[cite:101]
      return false;
    } finally {
      hideLoading(); //[cite:102]
    }
  };

  const exportToCSV = () => {
    if (students.length === 0) {
        showToast('No data to export.', 'warning');
        return;
    }
    showLoading("Exporting CSV..."); //[cite:102]
    try {
      const headers = ['Sl No', 'Name', 'Phone', 'Class', 'Group', 'Date Added', 'Status', 'Additional Info', 'Database ID']; //[cite:103]
      const rows = filteredStudents.map((student, index) => { // Export filtered students
        return [
          index + 1,
          `"${(student.name || '').replace(/"/g, '""')}"`,
          student.phone || '',
          student.class || '', //[cite:105]
          student.group || 'None',
          student.date ? formatDate(student.date) : '', // Use formatted date
          student.status || '',
          `"${(student.info || '').replace(/"/g, '""')}"`,
          student.id || '' // Include Supabase ID
        ];
      }); //[cite:105]
      const csvContent = [headers, ...rows]
        .map(row => row.join(','))
        .join('\n'); //[cite:106]
      const blob = new Blob([String.fromCharCode(0xFEFF), csvContent], { type: 'text/csv;charset=utf-8;' }); // Add BOM for Excel
      const url = URL.createObjectURL(blob); //[cite:108]
      const link = document.createElement('a');
      link.setAttribute('href', url);
      link.setAttribute('download', `admission_tracker_export_${new Date().toISOString().slice(0,10)}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      showToast('CSV exported successfully!', 'success'); //[cite:109]
    } catch (error) {
      console.error('Error exporting CSV:', error); //[cite:109]
      showToast('Failed to export CSV', 'error'); //[cite:110]
    } finally {
      hideLoading(); //[cite:111]
    }
  };

  const exportToPDF = () => {
    if (students.length === 0) {
        showToast('No data to export.', 'warning');
        return;
    }
    showLoading("Generating PDF..."); //[cite:111]
    try {
      const { jsPDF } = window.jspdf; //[cite:112]
      const doc = new jsPDF({
        orientation: 'portrait', // or 'landscape'
        unit: 'mm',
        format: 'a4'
      }); //[cite:113]

      doc.setFontSize(18); //[cite:114]
      doc.setTextColor(40); //[cite:114]
      doc.text('Admission Tracker Pro - Student Report', doc.internal.pageSize.getWidth() / 2, 20, { align: 'center' }); //[cite:115]

      doc.setFontSize(10); //[cite:115]
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, doc.internal.pageSize.getWidth() / 2, 27, { align: 'center' }); //[cite:116]
      doc.text(`Total Students (Filtered): ${filteredStudents.length}`, doc.internal.pageSize.getWidth() / 2, 32, { align: 'center' }); //[cite:116]
      
      let posY = 40; // Start Y for stats

      // Statistics section for PDF (using statusConfig for colors)
      const statusCounts = {};
      Object.keys(statusConfig).forEach(statusKey => statusCounts[statusKey] = 0);
      filteredStudents.forEach(s => {
          if (statusCounts.hasOwnProperty(s.status)) {
              statusCounts[s.status]++;
          }
      });

      doc.setFontSize(9);
      let statX = 15;
      const statBoxHeight = 7;
      const statBoxPadding = 2;
      Object.entries(statusCounts).forEach(([status, count]) => {
          if (count > 0) {
              const config = statusConfig[status];
              const text = `${status}: ${count}`;
              const textWidth = doc.getTextWidth(text) + (statBoxPadding * 2);
              
              if (statX + textWidth > doc.internal.pageSize.getWidth() - 15) {
                  statX = 15;
                  posY += statBoxHeight + 3;
              }
              const rgb = hexToRgb(config.pdfColor || '#cccccc');
              doc.setFillColor(...rgb);
              doc.setTextColor(255); // White text on colored badge
              doc.roundedRect(statX, posY, textWidth, statBoxHeight, 1, 1, 'F');
              doc.text(text, statX + statBoxPadding, posY + (statBoxHeight/2) + (doc.getLineHeight() * 0.25) , { baseline: 'middle' });
              statX += textWidth + 3;
          }
      });
      posY += statBoxHeight + 8; // Space after stats

      const headers = [['#', 'Name', 'Phone', 'Class', 'Group', 'Status', 'Date Added']]; //[cite:123]
      const data = filteredStudents.map((student, index) => [ // Use filtered students
        index + 1,
        student.name.length > 25 ? student.name.substring(0, 22) + '...' : student.name, // Truncate long names
        student.phone,
        student.class,
        student.group || 'N/A',
        student.status,
        student.date ? formatDate(student.date) : 'N/A' //[cite:125]
      ]); //[cite:125]

      doc.autoTable({
        head: headers, //[cite:126]
        body: data, //[cite:126]
        startY: posY, //[cite:126]
        theme: 'grid', //[cite:126]
        headStyles: {
          fillColor: [41, 128, 185], // Dark blue
          textColor: 255,
          fontStyle: 'bold', //[cite:127]
          halign: 'center' //[cite:127]
        },
        styles: {
          fontSize: 8, //[cite:128]
          cellPadding: 1.5, //[cite:128]
          overflow: 'linebreak', //[cite:128]
          valign: 'middle' //[cite:128]
        },
        columnStyles: {
          0: { cellWidth: 10, halign: 'center' }, //[cite:129]
          1: { cellWidth: 45 }, // Name
          2: { cellWidth: 28 }, // Phone
          3: { cellWidth: 15, halign: 'center' }, // Class
          4: { cellWidth: 20, halign: 'center' }, // Group
          5: { cellWidth: 30 }, // Status
          6: { cellWidth: 22, halign: 'center' } // Date //[cite:130]
        },
        didParseCell: (hookData) => {
          if (hookData.section === 'body' && hookData.column.index === 5) { // Status column
            const status = hookData.cell.raw;
            const config = statusConfig[status];
            if (config && config.pdfColor) {
                const rgb = hexToRgb(config.pdfColor);
                hookData.cell.styles.textColor = rgb;
                hookData.cell.styles.fontStyle = 'bold';
            }
          }
        },
        margin: { top: posY } //[cite:132]
      });

      const pageCount = doc.internal.getNumberOfPages(); //[cite:133]
      for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i); //[cite:134]
        doc.setFontSize(8); //[cite:135]
        doc.setTextColor(100); //[cite:135]
        doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.getWidth() / 2, doc.internal.pageSize.getHeight() - 10, { align: 'center' }); //[cite:135]
      }

      doc.save(`admission_report_${new Date().toISOString().slice(0,10)}.pdf`); //[cite:136]
      showToast('PDF exported successfully!', 'success'); //[cite:137]
    } catch (error) {
      console.error('Error exporting PDF:', error); //[cite:137]
      showToast('Failed to export PDF. Check console for details.', 'error'); //[cite:138]
    } finally {
      hideLoading(); //[cite:139]
    }
  };

  const backupToJSON = () => {
    if (students.length === 0) {
        showToast('No data to backup.', 'warning');
        return;
    }
    showLoading("Creating JSON backup..."); //[cite:139]
    try {
      const dataStr = JSON.stringify(students, null, 2); // Pretty print JSON //[cite:140]
      const blob = new Blob([dataStr], { type: 'application/json' }); //[cite:141]
      const url = URL.createObjectURL(blob); //[cite:141]
      const link = document.createElement('a');
      link.href = url; //[cite:141]
      link.download = `admission_tracker_backup_${new Date().toISOString().slice(0,10)}.json`; //[cite:142]
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      showToast('JSON backup created successfully!', 'success'); //[cite:142]
    } catch (error) {
      console.error('Error creating backup:', error); //[cite:143]
      showToast('Failed to create JSON backup', 'error'); //[cite:144]
    } finally {
      hideLoading(); //[cite:144]
    }
  };

  const restoreFromJSON = (file) => {
    showLoading("Reading JSON file..."); //[cite:145]
    const reader = new FileReader(); //[cite:146]
    reader.onload = async (event) => {
      try {
        const jsonData = event.target.result; //[cite:146]
        const parsedData = JSON.parse(jsonData); //[cite:147]
        if (!Array.isArray(parsedData)) {
          throw new Error('Invalid JSON format. Expected an array of student data.'); //[cite:147]
        }
        const validStudents = parsedData.filter(student => 
            student.name && student.phone && student.class && student.date && student.status && typeof student.id !== 'undefined' // Ensure essential fields and id
        ); //[cite:148]
        if (validStudents.length === 0) {
          throw new Error('No valid student records found in JSON file. Ensure records have name, phone, class, date, status, and id.'); //[cite:149]
        }
        showConfirmation(
          'Restore Data from JSON',
          `This will attempt to import ${validStudents.length} student records. Records with existing IDs in the database might be skipped or updated by Supabase depending on its configuration. Continue?`,
          'restoreData',
          validStudents,
          'bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800'
        ); //[cite:150]
      } catch (error) {
        console.error('Error restoring from JSON:', error); //[cite:151]
        showToast(error.message || 'Failed to parse JSON file', 'error'); //[cite:152]
      } finally {
        hideLoading(); //[cite:152]
        restoreJSONInput.value = ''; // Reset file input //[cite:153]
      }
    };
    reader.onerror = () => { //[cite:154]
      hideLoading(); //[cite:154]
      showToast('Error reading JSON file', 'error'); //[cite:154]
      restoreJSONInput.value = ''; //[cite:155]
    };
    reader.readAsText(file); //[cite:155]
  };

  const performRestore = async (studentsToRestore) => {
    showLoading(`Restoring ${studentsToRestore.length} students...`); //[cite:155]
    try {
      // Supabase upsert can handle insert or update based on primary key (id)
      const { data, error } = await supabaseMain
        .from('studentsdemo')
        .upsert(studentsToRestore, { onConflict: 'id', ignoreDuplicates: false }) // if id conflicts, it updates.
        .select();
      if (error) throw error; //[cite:157]
      
      showToast(`Successfully processed ${data.length} students from JSON. Refreshing data...`, 'success');
      await fetchStudents(); // Re-fetch all data to ensure consistency
    } catch (error) {
      console.error('Error restoring data:', error); //[cite:158]
      showToast(`Failed to restore data: ${error.message}`, 'error'); //[cite:159]
    } finally {
      hideLoading(); //[cite:159]
    }
  };

  const importFromCSV = (file) => {
    showLoading("Reading CSV file..."); //[cite:160]
    const reader = new FileReader(); //[cite:161]
    reader.onload = async (event) => {
      try {
        const csvData = event.target.result; //[cite:161]
        const lines = csvData.split(/\r\n|\n/); // Handles different line endings //[cite:162]
        if (lines.length < 2) throw new Error('CSV file is empty or has no data rows.');

        const rawHeaders = lines[0].split(',').map(h => h.trim().replace(/"/g, '').toLowerCase()); //[cite:162]
        
        const requiredHeaders = ['name', 'phone', 'class'];
        const missingHeaders = requiredHeaders.filter(rh => !rawHeaders.includes(rh));
        if (missingHeaders.length > 0) {
            throw new Error(`CSV must contain headers: ${missingHeaders.join(', ')}`);
        }

        const columnMap = {};
        rawHeaders.forEach((header, index) => {
            columnMap[header] = index;
        });

        const newStudents = [];
        const errors = [];

        for (let i = 1; i < lines.length; i++) { //[cite:165]
          if (!lines[i].trim()) continue; //[cite:165]
          try {
            const values = parseCSVLine(lines[i]); //[cite:166]
            
            const name = values[columnMap['name']];
            const phone = values[columnMap['phone']];
            const studentClass = values[columnMap['class']]; // Renamed to avoid conflict

            if (!name || !phone || !studentClass) {
              errors.push(`Skipping row ${i+1}: Missing required fields (Name, Phone, Class).`); //[cite:167]
              continue; //[cite:168]
            }
            
            // Use current date if not provided in CSV, ensure correct format if provided
            let dateValue = new Date().toISOString().split('T')[0]; // Default to today
            if (columnMap.hasOwnProperty('date') && values[columnMap['date']]) {
                const parsedDate = new Date(values[columnMap['date']]);
                if (!isNaN(parsedDate)) {
                    dateValue = parsedDate.toISOString().split('T')[0];
                } else {
                     errors.push(`Warning row ${i+1}: Invalid date format for '${values[columnMap['date']]}'. Using today's date.`);
                }
            }


            newStudents.push({
              name: name,
              phone: phone,
              class: studentClass,
              group: (columnMap.hasOwnProperty('group') && values[columnMap['group']]) ? values[columnMap['group']] : 'None', //[cite:169]
              date: dateValue,
              status: (columnMap.hasOwnProperty('status') && values[columnMap['status']]) ? values[columnMap['status']] : 'Not Checked', //[cite:170]
              info: (columnMap.hasOwnProperty('info') && values[columnMap['info']]) ? values[columnMap['info']] : '' //[cite:170]
            });
          } catch (lineError) {
            errors.push(`Error parsing row ${i+1}: ${lineError.message}`); //[cite:171]
          }
        }

        if (newStudents.length === 0 && errors.length > 0) {
          throw new Error(`No valid student records found in CSV. Errors: ${errors.join('; ')}`); //[cite:172]
        }
        if (newStudents.length === 0) {
          throw new Error('No valid student records found in CSV.'); //[cite:173]
        }

        if (errors.length > 0) {
          showToast(`${errors.length} rows had issues during CSV import. Check console.`, 'warning', 5000); //[cite:173]
          console.warn('CSV import warnings:', errors); //[cite:174]
        }

        showConfirmation(
          'Import from CSV',
          `This will import ${newStudents.length} student records. Continue?`,
          'importCSV',
          newStudents,
          'bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800' // Blue for import
        ); //[cite:175]
      } catch (error) {
        console.error('Error importing CSV:', error); //[cite:176]
        showToast(error.message || 'Failed to import CSV', 'error', 5000); //[cite:177]
      } finally {
        hideLoading(); //[cite:177]
        importCSVInput.value = ''; // Reset file input //[cite:178]
      }
    };
    reader.onerror = () => { //[cite:179]
      hideLoading(); //[cite:179]
      showToast('Error reading CSV file', 'error'); //[cite:179]
      importCSVInput.value = ''; //[cite:180]
    };
    reader.readAsText(file); //[cite:180]
  };

  const performCSVImport = async (studentsToImport) => {
    showLoading(`Importing ${studentsToImport.length} students...`); //[cite:180]
    try {
      const { data, error } = await supabaseMain
        .from('studentsdemo')
        .insert(studentsToImport.map(s => ({...s, created_at: new Date().toISOString()}))) // Add created_at
        .select(); //[cite:181]
      if (error) throw error; //[cite:182]

      showToast(`Successfully imported ${data.length} students from CSV. Refreshing data...`, 'success');
      await fetchStudents(); // Re-fetch all data
    } catch (error) {
      console.error('Error importing students:', error); //[cite:183]
      showToast(`Failed to import students: ${error.message}`, 'error'); //[cite:184]
    } finally {
      hideLoading(); //[cite:184]
    }
  };
  
  // ================ UI FUNCTIONS ================
  const applyFiltersAndRender = () => {
    const searchTerm = searchInput.value.toLowerCase().trim(); //[cite:185]
    const statusValue = statusFilter.value; //[cite:186]
    const classValue = classFilter.value; //[cite:186]
    const groupValue = groupFilter.value; //[cite:186]

    filteredStudents = students.filter(student => {
      const matchesSearch = !searchTerm || (
        (student.name || '').toLowerCase().includes(searchTerm) ||
        (student.phone || '').includes(searchTerm) || // Phone search can be exact or partial
        (student.info || '').toLowerCase().includes(searchTerm) ||
        (student.id || '').toString().toLowerCase().includes(searchTerm) // Search by Supabase ID
      );
      const matchesStatus = !statusValue || student.status === statusValue; //[cite:187]
      const matchesClass = !classValue || student.class === classValue; //[cite:187]
      const matchesGroup = !groupValue || student.group === groupValue; //[cite:188]
      return matchesSearch && matchesStatus && matchesClass && matchesGroup;
    }); //[cite:188]
    currentPage = 1; //[cite:189]
    renderStudents(); //[cite:189]
    updateDashboard(); //[cite:189]
    updateCharts(); // Make sure charts are updated after filtering
  };


const renderStudents = () => {
    const startIndex = (currentPage - 1) * studentsPerPage; //[cite:189]
    const endIndex = startIndex + studentsPerPage; //[cite:190]
    const paginatedStudents = filteredStudents.slice(startIndex, endIndex); //[cite:190]

    studentList.innerHTML = ''; // Clear current list //[cite:190]

    if (filteredStudents.length === 0 && students.length > 0) { // Filters applied, no results
        studentList.innerHTML = `
        <div class="col-span-full text-center py-10">
            <i class="fas fa-search-minus text-4xl text-gray-400 dark:text-gray-500 mb-4"></i>
            <p class="text-gray-500 dark:text-gray-400">No students found matching your current filters.</p>
            <button id="clearFiltersButton" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 custom-focus">Clear Filters</button>
        </div>`;
        document.getElementById('clearFiltersButton')?.addEventListener('click', () => {
            searchInput.value = '';
            statusFilter.value = '';
            classFilter.value = '';
            groupFilter.value = '';
            applyFiltersAndRender();
        });
    } else if (students.length === 0 && initialLoadingMessage.classList.contains('hidden')) { // No students at all, after initial load attempt
         studentList.innerHTML = `
        <div class="col-span-full text-center py-10">
            <i class="fas fa-users-slash text-4xl text-gray-400 dark:text-gray-500 mb-4"></i>
            <p class="text-gray-500 dark:text-gray-400">No students have been added yet.</p>
            <button id="addFirstStudentButton" class="mt-4 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 custom-focus">
                <i class="fas fa-plus mr-2"></i>Add Your First Student
            </button>
        </div>`;
        document.getElementById('addFirstStudentButton')?.addEventListener('click', openStudentForm);
    }


    paginatedStudents.forEach(student => {
        const config = statusConfig[student.status] || statusConfig["Not Checked"];
        const studentIdSuffix = typeof student.id === 'number' ? String(student.id).slice(-4).padStart(4, '0') : (student.id || 'N/A').slice(-4); // Use last 4 chars of ID or N/A

        const card = document.createElement('div');
        card.id = `genius-${student.class || 'NOCLASS'}-${studentIdSuffix}`; // Ensure class is defined
        card.className = `relative group bg-gradient-to-br ${config.gradient} rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 p-5 border border-transparent hover:border-blue-500 dark:hover:border-yellow-400 flex flex-col justify-between min-h-[280px]`;

        card.innerHTML = `
            <div> <div class="absolute top-0 right-0 mt-3 mr-3 px-2.5 py-1 text-xs font-semibold text-white ${config.badgeBg} rounded-full shadow-md flex items-center gap-1.5" title="Status: ${student.status}">
                    ${config.icon}
                    <span>${student.status}</span>
                </div>

                <div class="flex items-start mb-3">
                    <div class="w-10 h-10 rounded-full ${config.badgeBg} bg-opacity-80 text-white flex items-center justify-center text-lg font-bold mr-3 flex-shrink-0" title="${student.name}">
                        ${(student.name || 'N A').split(' ').map(n => n[0]).slice(0,2).join('').toUpperCase()}
                    </div>
                    <div>
                        <h3 class="text-lg font-bold ${config.text} truncate" title="${student.name}">${student.name || 'N/A'}</h3>
                        <p class="text-sm ${config.iconColor} opacity-90">Class ${student.class || 'N/A'}${student.group && student.group !== 'None' ? ` (${student.group})` : ''}</p>
                    </div>
                </div>

                <div class="space-y-1.5 text-sm ${config.text} opacity-80 mb-3">
                    <div class="flex items-center" title="Phone: ${student.phone || 'N/A'}">
                        <i class="fas fa-phone-alt w-4 mr-2 ${config.iconColor}"></i>
                        <a href="tel:${student.phone}" class="hover:underline">${student.phone || 'N/A'}</a>
                    </div>
                    <div class="flex items-center" title="Date Added: ${formatDate(student.date)}">
                        <i class="fas fa-calendar-alt w-4 mr-2 ${config.iconColor}"></i>
                        <span>${formatDate(student.date)}</span>
                    </div>
                    </div>

                <p class="text-xs ${config.text} opacity-70 mb-3 h-10 overflow-hidden leading-snug" title="${student.info || ''}">
                    ${student.info ? (student.info.substring(0, 70) + (student.info.length > 70 ? '...' : '')) : '<span class="italic">No additional info.</span>'}
                </p>
            </div>

            <div class="mt-auto"> <div class="flex flex-wrap gap-2 border-t border-gray-300 dark:border-gray-600 pt-3">
                    <button onclick="window.editStudent('${student.id}')" class="flex-1 px-3 py-1.5 bg-sky-500 hover:bg-sky-600 dark:bg-sky-600 dark:hover:bg-sky-700 text-white rounded-md text-xs font-medium flex items-center justify-center gap-1.5 transition-transform transform hover:scale-105 custom-focus" title="Edit ${student.name}">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                    <button onclick="window.deleteStudentPrompt('${student.id}')" class="flex-1 px-3 py-1.5 bg-red-500 hover:bg-red-600 dark:bg-red-600 dark:hover:bg-red-700 text-white rounded-md text-xs font-medium flex items-center justify-center gap-1.5 transition-transform transform hover:scale-105 custom-focus" title="Delete ${student.name}">
                        <i class="fas fa-trash"></i> Delete
                    </button>
                    <a href="tel:${student.phone}" class="flex-1 px-3 py-1.5 bg-green-500 hover:bg-green-600 dark:bg-green-600 dark:hover:bg-green-700 text-white rounded-md text-xs font-medium flex items-center justify-center gap-1.5 transition-transform transform hover:scale-105 custom-focus" title="Call ${student.name}">
                        <i class="fas fa-phone"></i> Call
                    </a>
                </div>
                <div class="text-right text-[10px] text-gray-400 dark:text-gray-500 mt-2" title="Unique ID: genius-${student.class || 'NOCLASS'}-${studentIdSuffix}">
                    ID: genius-${student.class || 'NOCLASS'}-${studentIdSuffix}
                </div>
            </div>
        `;
        studentList.appendChild(card);
    });

    updatePaginationControls();
  }; //[cite:197]


  const updatePaginationControls = () => {
    const totalPages = Math.ceil(filteredStudents.length / studentsPerPage);
    pageInfo.textContent = `Page ${currentPage} of ${totalPages || 1}`;
    showingCount.textContent = paginatedStudents.length > 0 ? paginatedStudents.length : filteredStudents.length > 0 ? filteredStudents.length : '0'; // Show actual number if one page
    totalCount.textContent = filteredStudents.length;

    prevPage.disabled = currentPage === 1; //[cite:198]
    nextPage.disabled = currentPage === totalPages || totalPages === 0; //[cite:198]

    prevPage.classList.toggle('opacity-50', prevPage.disabled);
    prevPage.classList.toggle('cursor-not-allowed', prevPage.disabled);
    nextPage.classList.toggle('opacity-50', nextPage.disabled);
    nextPage.classList.toggle('cursor-not-allowed', nextPage.disabled);
  }


  const updateDashboard = () => {
    dashboardElements.total.textContent = students.length; // Show total from all students, not just filtered
    dashboardElements.called.textContent = students.filter(s => s.status === 'Called').length; //[cite:200]
    dashboardElements.followup.textContent = students.filter(s => s.status === 'Follow-Up Needed').length; //[cite:200]
    dashboardElements.agreed.textContent = students.filter(s => s.status === 'Agreed').length; //[cite:201]
    dashboardElements.none.textContent = students.filter(s => s.status === 'Not Interested').length; //[cite:201]
    dashboardElements.paid.textContent = students.filter(s => s.status === 'Paid').length; //[cite:202]
  };

  const CHART_COLORS_DARK = {
    backgroundColor: 'rgba(55, 65, 81, 0.2)', // gray-700 with alpha
    borderColor: 'rgba(156, 163, 175, 1)', // gray-400
    gridColor: 'rgba(75, 85, 99, 0.2)', // gray-600
    ticksColor: 'rgba(209, 213, 219, 1)', // gray-300
    pointBackgroundColor: 'rgba(209, 213, 219, 1)',
    labelColor: 'rgba(209, 213, 219, 1)'
  };

  const CHART_COLORS_LIGHT = {
    backgroundColor: 'rgba(229, 231, 235, 0.2)', // gray-200 with alpha
    borderColor: 'rgba(107, 114, 128, 1)', // gray-500
    gridColor: 'rgba(209, 213, 219, 0.2)', // gray-300
    ticksColor: 'rgba(55, 65, 81, 1)', // gray-700
    pointBackgroundColor: 'rgba(55, 65, 81, 1)',
    labelColor: 'rgba(55, 65, 81, 1)'
  };
  
  const getChartColors = () => {
    return document.documentElement.classList.contains('dark') ? CHART_COLORS_DARK : CHART_COLORS_LIGHT;
  };

  const initCharts = () => {
    const currentChartColors = getChartColors();
    const defaultChartOptions = {
        responsive: true, //[cite:205]
        maintainAspectRatio: false, //[cite:205]
        plugins: {
            legend: {
                labels: { color: currentChartColors.labelColor }
            }
        },
        scales: {
            y: {
                beginAtZero: true, //[cite:205]
                ticks: { precision: 0, color: currentChartColors.ticksColor }, //[cite:206]
                grid: { color: currentChartColors.gridColor }
            },
            x: {
                ticks: { color: currentChartColors.ticksColor },
                grid: { color: currentChartColors.gridColor }
            }
        }
    };
    
    if (classChart) classChart.destroy();
    const classCtx = document.getElementById('classChart').getContext('2d'); //[cite:202]
    classChart = new Chart(classCtx, { //[cite:203]
      type: 'bar',
      data: {
        labels: ['Class 6', 'Class 7', 'Class 8', 'Class 9', 'Class 10', 'Class 11', 'Class 12'], //[cite:203]
        datasets: [{
          label: 'Students by Class',
          backgroundColor: Object.values(statusConfig).map(s => s.pdfColor), // Use status colors for variety or a single theme color
          borderColor: currentChartColors.borderColor, //[cite:204]
          borderWidth: 1,
          data: [0, 0, 0, 0, 0, 0, 0] //[cite:204]
        }]
      },
      options: { ...defaultChartOptions, plugins: { legend: { display: false } } }
    });

    if (statusChart) statusChart.destroy();
    const statusCtx = document.getElementById('statusChart').getContext('2d'); //[cite:208]
    statusChart = new Chart(statusCtx, { //[cite:209]
      type: 'doughnut',
      data: {
        labels: Object.keys(statusConfig), // Use keys from statusConfig for labels
        datasets: [{
          data: Object.keys(statusConfig).map(() => 0), // Initialize with zeros
          backgroundColor: Object.values(statusConfig).map(s => s.pdfColor), // Use colors from statusConfig //[cite:210]
          borderColor: document.documentElement.classList.contains('dark') ? '#2d3748' : '#ffffff', // gray-800 or white for border
          borderWidth: 2 //[cite:211]
        }]
      },
      options: { ...defaultChartOptions, plugins: { legend: { position: 'right', labels: { color: currentChartColors.labelColor } } } } //[cite:212]
    });

    if (progressChart) progressChart.destroy();
    const progressCtx = document.getElementById('progressChart').getContext('2d'); //[cite:213]
    progressChart = new Chart(progressCtx, { //[cite:214]
      type: 'line',
      data: {
        labels: [], //[cite:214]
        datasets: [{
          label: 'Admissions Added Over Time',
          data: [], //[cite:214]
          fill: true,
          backgroundColor: currentChartColors.backgroundColor,
          borderColor: statusConfig['Agreed'].pdfColor || '#3b82f6', // A prominent color, e.g., 'Agreed' status color //[cite:215]
          tension: 0.2 //[cite:215]
        }]
      },
      options: defaultChartOptions
    });
  }; //[cite:217]

  const updateCharts = () => {
    if (!classChart || !statusChart || !progressChart) return; //[cite:217]
    const currentChartColors = getChartColors();

    // Update Class Chart (using filtered students for dashboard relevance)
    const classCounts = ['6', '7', '8', '9', '10', '11', '12'].map(cls =>
      filteredStudents.filter(s => String(s.class) === cls).length // Ensure class is string for comparison
    ); //[cite:218]
    classChart.data.datasets[0].data = classCounts; //[cite:219]
    classChart.options.scales.y.ticks.color = currentChartColors.ticksColor;
    classChart.options.scales.x.ticks.color = currentChartColors.ticksColor;
    classChart.options.scales.y.grid.color = currentChartColors.gridColor;
    classChart.options.scales.x.grid.color = currentChartColors.gridColor;
    classChart.update();

    // Update Status Chart (using filtered students)
    const statusChartData = Object.keys(statusConfig).map(statusKey =>
        filteredStudents.filter(s => s.status === statusKey).length
    );
    statusChart.data.datasets[0].data = statusChartData; //[cite:220]
    statusChart.options.plugins.legend.labels.color = currentChartColors.labelColor;
    statusChart.update(); //[cite:220]

    // Update Progress Chart (using all students for historical trend)
    if (students.length > 0) {
      const dateMap = {};
      // Ensure students are sorted by date for correct cumulative calculation
      const sortedStudentsByDate = [...students].sort((a,b) => new Date(a.date) - new Date(b.date));

      sortedStudentsByDate.forEach(student => { //[cite:222]
        const date = student.date ? student.date.split('T')[0] : null; //[cite:222]
        if (date) { // Only count if date is valid
            dateMap[date] = (dateMap[date] || 0) + 1; //[cite:222]
        }
      });
      const sortedDates = Object.keys(dateMap).sort((a,b) => new Date(a) - new Date(b)); //[cite:223]
      const cumulativeCounts = [];
      let total = 0; //[cite:223]
      sortedDates.forEach(date => { //[cite:224]
        total += dateMap[date]; //[cite:224]
        cumulativeCounts.push(total); //[cite:224]
      });
      progressChart.data.labels = sortedDates.map(date => formatDate(date)); //[cite:225]
      progressChart.data.datasets[0].data = cumulativeCounts; //[cite:225]
      progressChart.options.scales.y.ticks.color = currentChartColors.ticksColor;
      progressChart.options.scales.x.ticks.color = currentChartColors.ticksColor;
      progressChart.options.scales.y.grid.color = currentChartColors.gridColor;
      progressChart.options.scales.x.grid.color = currentChartColors.gridColor;
      progressChart.options.plugins.legend.labels.color = currentChartColors.labelColor;
      progressChart.data.datasets[0].borderColor = statusConfig['Agreed'].pdfColor || '#3b82f6';
      progressChart.data.datasets[0].backgroundColor = currentChartColors.backgroundColor;
      progressChart.update(); //[cite:225]
    }
  };
  
  const openStudentForm = (studentToEdit = null) => {
    currentEditingId = studentToEdit ? studentToEdit.id : null; //[cite:226]
    modalTitle.textContent = studentToEdit ? 'Edit Student' : 'Add Student'; //[cite:226]
    saveButtonText.textContent = studentToEdit ? 'Update Student' : 'Save Student';
    studentForm.reset(); //[cite:226]
    if (studentToEdit) {
        document.getElementById('name').value = studentToEdit.name || '';
        document.getElementById('phone').value = studentToEdit.phone || '';
        document.getElementById('class').value = studentToEdit.class || '';
        document.getElementById('group').value = studentToEdit.group || 'None';
        document.getElementById('date').value = studentToEdit.date ? studentToEdit.date.split('T')[0] : getCurrentDateInput();
        document.getElementById('status').value = studentToEdit.status || 'Not Checked';
        document.getElementById('info').value = studentToEdit.info || '';
    } else {
        document.getElementById('date').value = getCurrentDateInput(); // Default to today for new students //[cite:226]
    }
    studentPanelModal.classList.remove('hidden');
    document.getElementById('name').focus(); // Focus on the first field
  }


  // ================ EVENT LISTENERS ================
  openStudentPanel.addEventListener('click', () => openStudentForm());

  closeStudentPanel.addEventListener('click', () => {
    studentPanelModal.classList.add('hidden'); //[cite:227]
  });

  studentForm.addEventListener('submit', async (e) => {
    e.preventDefault(); //[cite:228]
    const studentData = {
      name: document.getElementById('name').value.trim(),
      phone: document.getElementById('phone').value.trim(),
      class: document.getElementById('class').value,
      group: document.getElementById('group').value,
      date: document.getElementById('date').value, // Already in YYYY-MM-DD
      status: document.getElementById('status').value,
      info: document.getElementById('info').value.trim() //[cite:229]
    };
    const success = await saveStudent(studentData, currentEditingId); //[cite:229]
    if (success) {
        studentPanelModal.classList.add('hidden'); //[cite:229]
    }
  });

  // Debounced search and filter listeners
  searchInput.addEventListener('input', debounce(applyFiltersAndRender, 350)); //[cite:230]
  statusFilter.addEventListener('change', applyFiltersAndRender); //[cite:230]
  classFilter.addEventListener('change', applyFiltersAndRender); //[cite:230]
  groupFilter.addEventListener('change', applyFiltersAndRender); //[cite:230]

  prevPage.addEventListener('click', () => {
    if (currentPage > 1) {
      currentPage--; //[cite:230]
      renderStudents(); //[cite:230]
    }
  });

  nextPage.addEventListener('click', () => {
    const totalPages = Math.ceil(filteredStudents.length / studentsPerPage); //[cite:231]
    if (currentPage < totalPages) {
      currentPage++; //[cite:231]
      renderStudents(); //[cite:231]
    }
  });

  cancelConfirm.addEventListener('click', () => {
    confirmModal.classList.add('hidden'); //[cite:232]
    pendingAction = null; //[cite:232]
    pendingActionData = null; //[cite:232]
  });

  proceedConfirm.addEventListener('click', async () => {
    confirmModal.classList.add('hidden'); //[cite:233]
    if (pendingAction === 'deleteStudent') {
      await deleteStudent(pendingActionData); //[cite:233]
    } else if (pendingAction === 'importCSV') {
      await performCSVImport(pendingActionData); //[cite:233]
    } else if (pendingAction === 'restoreData') {
      await performRestore(pendingActionData); //[cite:233]
    }
    pendingAction = null; //[cite:234]
    pendingActionData = null; //[cite:234]
  });

  exportCSVBtn.addEventListener('click', exportToCSV); //[cite:235]
  exportPDFBtn.addEventListener('click', exportToPDF); //[cite:235]
  backupJSONBtn.addEventListener('click', backupToJSON); //[cite:235]

  importCSVInput.addEventListener('change', (e) => {
    if (e.target.files.length > 0) {
      importFromCSV(e.target.files[0]); //[cite:235]
    }
  });

  restoreJSONInput.addEventListener('change', (e) => {
    if (e.target.files.length > 0) {
      restoreFromJSON(e.target.files[0]); //[cite:236]
    }
  });

  const applyDarkMode = (isDark) => {
    if (isDark) {
        document.documentElement.classList.add('dark');
        toggleThumb.classList.remove('translate-x-0'); // Tailwind JIT might need specific classes defined
        toggleThumb.classList.add('translate-x-full'); // Ensure this class moves it fully
        toggleIcon.textContent = '☀️'; //[cite:240]
    } else {
        document.documentElement.classList.remove('dark');
        toggleThumb.classList.remove('translate-x-full');
        toggleThumb.classList.add('translate-x-0');
        toggleIcon.textContent = '🌙'; //[cite:240]
    }
    // Reinitialize charts with new theme colors
    initCharts(); // Re-creates charts with correct colors
    updateCharts(); // Populates them with data
  };

  darkModeToggle.addEventListener('click', () => {
    const isDark = document.documentElement.classList.toggle('dark'); //[cite:237]
    localStorage.setItem('darkMode', isDark); //[cite:237]
    applyDarkMode(isDark);
  });
  
  // Keyboard accessibility for dark mode toggle
  darkModeToggle.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      const isDark = document.documentElement.classList.toggle('dark');
      localStorage.setItem('darkMode', isDark);
      applyDarkMode(isDark);
    }
  });


  // Initialize dark mode from localStorage
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  const savedDarkMode = localStorage.getItem('darkMode');
  if (savedDarkMode === 'true' || (savedDarkMode === null && prefersDark)) {
      applyDarkMode(true);
  } else {
      applyDarkMode(false);
  }
  

  // Supabase Realtime Subscription
  const channel = supabaseMain
    .channel('students_changes')
    .on(
      'postgres_changes',
      { event: '*', schema: 'public', table: 'studentsdemo' },
      (payload) => {
        console.log('Change received!', payload);
        showToast('Data updated in real-time!', 'info', 1500);
        fetchStudents(); // Re-fetch all data on any change
      }
    )
    .subscribe(); //[cite:242]
    

  // Expose functions to global scope for button onclick handlers in dynamic HTML
  window.editStudent = (id) => {
    const student = students.find(s => String(s.id) === String(id)); // Ensure ID comparison is consistent //[cite:243]
    if (!student) {
        showToast(`Student with ID ${id} not found.`, 'error');
        return;
    }; //[cite:244]
    openStudentForm(student);
  };

  window.deleteStudentPrompt = (id) => {
    const student = students.find(s => String(s.id) === String(id)); //[cite:246]
    if (!student) {
        showToast(`Student with ID ${id} not found for deletion.`, 'error');
        return;
    }; //[cite:247]
    showConfirmation(
      'Delete Student',
      `Are you sure you want to delete ${student.name}? This action cannot be undone.`,
      'deleteStudent',
      id,
      'bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-800' // Red for delete
    ); //[cite:247]
  };
  
  // Set header height for sticky filter section (if header height is dynamic)
  const header = document.querySelector('header');
  const setHeaderHeight = () => {
    if(header) {
      const headerHeight = header.offsetHeight;
      document.documentElement.style.setProperty('--header-height', `${headerHeight}px`);
    }
  };
  setHeaderHeight();
  window.addEventListener('resize', debounce(setHeaderHeight, 200));


  // INITIAL LOAD
  initCharts(); // Initialize charts first //[cite:241]
  fetchStudents(); // Then fetch data //[cite:241]
});
</script>